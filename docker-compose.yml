version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: hzm_postgres
    environment:
      POSTGRES_DB: hzm_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hzm_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hzm_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hzm_network

  # Backend API
  backend:
    build: .
    container_name: hzm_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/hzm_db
      REDIS_URL: redis://redis:6379
      PORT: 5000
      FRONTEND_URL: http://localhost:5173
      JWT_SECRET: dev-secret-key-change-in-production
    ports:
      - "5001:5000"
    volumes:
      - ./src:/app/src
      - ./migrations:/app/migrations
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm start
    networks:
      - hzm_network

volumes:
  postgres_data:
  redis_data:

networks:
  hzm_network:
    driver: bridge

